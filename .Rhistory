m = paste("Appeal summary:", id[i], " | ")
cat(m)
query_url = paste0(url, id[i], ".json")
doc <- fromJSON(getURL(query_url))
it <- as.data.frame(doc)
if (i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
}
## For years.
if (!is.null(year)) {
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/year/'  # base url
for (i in 1:length(year)) {
m = paste("Appeal for year:", year[i], " | ")
cat(m)
query_url = paste0(url, year[i], ".json")
it <- fromJSON(getURL(query_url))
if(i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
}
return(out)
}
View(x)
it <- fromJSON(getURL(query_url))
x <- ftsAppealSummary(2015)
View(x)
# Function to fetch all transaction data
# from FTS using appeal IDs.
ftsAppealSummary <- function(id = NULL, year = NULL) {
# checking for parameters
if (is.null(id) & is.null(year)) {
stop('Please provide an emergency id or year. See documentation for more details. ?fetchEmergencyData')
}
if (!is.null(id) & !is.null(year)) {
stop('Provide either an emergency id OR a year. See documentation for more details. ?fetchEmergencyData')
}
## For emergency ids.
if (!is.null(id)) {
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/id/'  # base url
for (i in 1:length(id)) {
m = paste("Appeal summary:", id[i], " | ")
cat(m)
query_url = paste0(url, id[i], ".json")
doc <- fromJSON(getURL(query_url))
it <- as.data.frame(doc)
if (i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
}
## For years.
if (!is.null(year)) {
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/year/'  # base url
for (i in 1:length(year)) {
m = paste("Appeal for year:", year[i], " | ")
cat(m)
query_url = paste0(url, year[i], ".json")
it <- fromJSON(getURL(query_url))
if(i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
}
return(out)
}
x <- ftsAppealSummary(year = 2015)
View(x)
x <- ftsAppealSummary(year = c(2000:2014))
View(x)
x <- ftsAppealSummary(c(1090, 1079))
View(x)
# Function to fetch record-by-record of each
# appeal in FTS.
ftsAppealTransactions <- function(id = NULL) {
# checking for parameters
if (is.null(id)) {
stop('Please provide an emergency id or year. See documentation for more details. ?fetchEmergencyData')
}
## For emergency ids.
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/id/'  # base url
for (i in 1:length(id)) {
m = paste("Appeal summary:", id[i], " | ")
cat(m)
query_url = paste0(url, id[i], ".json")
it <- fromJSON(getURL(query_url))
if(i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
return(out)
}
names(x)
y <- fetchAppealTransactions(x$id)
# Function to fetch record-by-record of each
# appeal in FTS.
ftsAppealTransactions <- function(id = NULL) {
# checking for parameters
if (is.null(id)) {
stop('Please provide an emergency id or year. See documentation for more details. ?fetchEmergencyData')
}
## For emergency ids.
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/id/'  # base url
for (i in 1:length(id)) {
m = paste("Appeal summary:", id[i], " | ")
cat(m)
query_url = paste0(url, id[i], ".json")
it <- fromJSON(getURL(query_url))
if(i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
return(out)
}
y <- fetchAppealTransactions(x$id)
y <- ftsAppealTransactions(x$id)
x <- ftsAppealSummary(year = 2015)
View(x)
y <- ftsAppealTransactions(x$id)
View(y)
# Function to fetch record-by-record of each
# appeal in FTS.
ftsAppealTransactions <- function(id = NULL) {
# checking for parameters
if (is.null(id)) {
stop('Please provide an emergency id or year. See documentation for more details. ?fetchEmergencyData')
}
## For emergency ids.
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Contribution/appeal/'  # base url
for (i in 1:length(id)) {
m = paste("Appeal summary:", id[i], " | ")
cat(m)
query_url = paste0(url, id[i], ".json")
it <- fromJSON(getURL(query_url))
if(i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
return(out)
}
y <- ftsAppealTransactions(x$id)
View(y)
data(mtcars)
attach(mtcars)
View(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt); fit
factor(cyl)
unique(factor(cyl)))
unique(factor(cyl))
summary(fit)
qplot(wt, mpg, data=mtcars, colour=factor(cyl))
library(ggplot2)
qplot(wt, mpg, data=mtcars, colour=factor(cyl))
fit <- lm(mpg ~ factor(cyl) + wt); fit
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt); fit
summary(fit)
fit <- lm(mpg ~ factor(cyl)); fit
fit <- lm(mpg ~ as.factor(cyl) + wt); fit
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt); fit
summary(fit)
fit$coefficients
unique(factor(cyl))
length(unique(factor(cyl)))
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt); fit
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
summary(fit)
fit2 <- lm(mpg ~ factor(cyl) + wt); fit2
summary(fit2)
27.9199 - 33.9908
fit$coefficients
fit$coefficients[1]
fit$coefficients[1] - fit$coefficients[3]
fit$coefficients[3] - fit$coefficients[1]
fit <- lm(mpg ~ factor(cyl) + wt); fit
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
summary(fit)
fit2 <- lm(mpg ~ factor(cyl) + 0); fit2
summary(fit2)
26.6636 - 19.7429
33 - 29
29 - 27
fit <- lm(mpg ~ factor(cyl) + wt + cyl:wt + 0)
fit2 <- lm(mpg ~ factor(cyl) + wt + cyl:wt + 0); fit2
fit2 <- lm(mpg ~ factor(cyl) + wt + cyl*wt + 0); fit2
fit2 <- lm(mpg ~ factor(cyl) + wt + cyl:wt + 0); fit2
summary(fit2)
anova(fit, fit2)
a <- anova(fit, fit2); summary(a)
a <- anova(fit, fit2); summary(a); a
a <- anova(fit, fit2); summary(a); a
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
summary(fit)
fit2 <- lm(mpg ~ factor(cyl) + wt + cyl:wt + 0); fit2
summary(fit2)
a <- anova(fit, fit2); summary(a); a
?I
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
# question 4
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
?mtcars
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl) + 0, data = mtcars)
summary(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?hatvalues
fit <- lm(y ~ x)
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
?dfbeta
dfbeta(fit)
hatvalues(fit)
hatvalues(fit)
hatvalues(fit, 5)
hatvalues(fit)
?dfbeta
# question 6
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
dfbeta(fit)
# question 6
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
dfbetas(fit)
dfbeta(fit)
influence.measures(fit)
?influence.measures
# question 2
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
summary(fit)
fit2 <- lm(mpg ~ factor(cyl) + 0); fit2
summary(fit2)
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
fit2 <- lm(mpg ~ factor(cyl) + 0); fit2
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
summary(fit)
# question 3
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
summary(fit)
fit2 <- lm(mpg ~ factor(cyl) + wt + cyl:wt + 0); fit2
summary(fit2)
a <- anova(fit, fit2); summary(a); a
library(swirl)
swirld()
swirl()
33/36
deck
1/52
52
4/52
13/52
info
info()
4
5/52
1/52
(12/52)*(11/52)*(10/52)*(9/52)
(12/51)*(11/50)*(10/49)*(9/48)
(12/51)*(11/50)*(10/49)*(9/48)*1
(12/51)*(11/50)*(10/49)*(9/48)*1
info()
skip()
4
(3*4)/52
2/51
FILE_PATH = "data/indicator_data.csv"
downloadAndClean <- function(p = NULL, verbose = FALSE) {
if (is.null(p)) stop("Provide a path.")
# Downloading file.
cat("Downloading file ... \n")
u = "https://docs.google.com/spreadsheets/d/1L7O4QFetHdHUdsIv4xgb2rGLGQxIlEYIy-bLXMu5wVU/export?format=csv"
download.file(u, p, method = 'wget')
cat("done.\n")
# Cleaning file.
}
downloadAndClean(FILE_PATH)
?download.file
# Script to download indicator data
# and prepare it to the heatmap.
FILE_PATH = "data/indicator_data.csv"
downloadAndClean <- function(p = NULL, verbose = FALSE) {
if (is.null(p)) stop("Provide a path.")
# Downloading file.
cat("Downloading file ... \n")
u = "https://docs.google.com/spreadsheets/d/1L7O4QFetHdHUdsIv4xgb2rGLGQxIlEYIy-bLXMu5wVU/export?format=csv"
download.file(u, destfile = p, method = 'wget')
cat("done.\n")
# Cleaning file.
}
downloadAndClean(FILE_PATH)
setwd("~/Documents/Programming/eastafrica-data-heatmap")
FILE_PATH = "data/indicator_data.csv"
downloadAndClean <- function(p = NULL, verbose = FALSE) {
if (is.null(p)) stop("Provide a path.")
# Downloading file.
cat("Downloading file ... \n")
u = "https://docs.google.com/spreadsheets/d/1L7O4QFetHdHUdsIv4xgb2rGLGQxIlEYIy-bLXMu5wVU/export?format=csv"
download.file(u, p, method = 'wget')
cat("done.\n")
# Cleaning file.
}
downloadAndClean(FILE_PATH)
p = FILE_PATH
d = read.csv(p)
View(d)
?read.csv
d = read.csv(p,  skip = 1)
View(d)
d = d[, 4:nrow(d)]
d = d[4:nrow(d),]
View(d)
View(d)
nrow(d)
View(d)
?read.csv
d = read.csv(p,  skip = 1, na.strings = '')
d = d[4:nrow(d),]
View(d)
names(d)
library(countrycode)
names(d)
names(d)[1] <- "location"
countrycode(d$location, "coutry.name", "iso3c"
)
?countrycode
countrycode(d$location, "country.name", "iso3c")
d$iso <- countrycode(d$location, "country.name", "iso3c")
View(d)
# Downloading file.
cat("Downloading file ... \n")
u = "https://docs.google.com/spreadsheets/d/1L7O4QFetHdHUdsIv4xgb2rGLGQxIlEYIy-bLXMu5wVU/export?format=csv"
download.file(u, p, method = 'wget')
cat("done.\n")
# Cleaning file.
d = read.csv(p,  skip = 1, na.strings = '')
d = d[4:nrow(d),]
names(d)[1] <- "location"
# Selecting countries only.
d$iso <- countrycode(d$location, "country.name", "iso3c")
names(d)
View(d)
View(d$iso)
# Downloading file.
cat("Downloading file ... \n")
u = "https://docs.google.com/spreadsheets/d/1L7O4QFetHdHUdsIv4xgb2rGLGQxIlEYIy-bLXMu5wVU/export?format=csv"
download.file(u, p, method = 'wget')
cat("done.\n")
# Cleaning file.
d = read.csv(p,  skip = 1, na.strings = '')
d = d[4:nrow(d),]
names(d)[1:2] <- c("iso", "location")
d$iso <- countrycode(d$iso, "country.name", "iso3c")
View(d$io)
View(d$iso)
ncol(iso)
ncol(d)
is.na(d)
summary(is.na(d))
summary(is.na(d[3]))
summary(is.na(d))
x <- is.na(d)
View(x)
x <- is.na(d[3:ncol(d))
x <- is.na(d[3:ncol(d)])
View(x)
d[3:ncol(d)] <- is.na(d[3:ncol(d)])
View(d)
View(d)
df = d
c = unique(df$iso)
c
i = 1
x <- df[df$iso == c[i], ]
View(x)
x == TRUE
summary(x == TRUE)
library(reshape2)
d_melt <- melt(d)
View(d_melt)
d_melt <- melt(d)
d_melt <- melt(d, id.vars = c("iso", "location"))
View(d_melt)
library(dplyr)
d_melt %>% group_by(iso)
d_melt %>% group_by(iso) %>% sum(value == TRUE)
d_melt %>% group_by(iso) %>% aggregate(value)
d_melt %>% group_by(iso) %>% aggregate(value, sum)
aggregate(iso ~ value, data = d_melt, fun=length)
aggregate(iso ~ value, data = d_melt, length)
aggregate(iso + location ~ value, data = d_melt, length)
aggregate(iso ~ value, data = d_melt, length)
aggregate(value ~ iso, data = d_melt, length)
aggregate(value ~ iso, data = subset(d_melt, value == TRUE), length)
a <- data.frame(
iso = aggregate(value ~ iso, data = d_melt, length)$iso,
total_values = aggregate(value ~ iso, data = d_melt, length)$value,
total_values_available = aggregate(value ~ iso, data = subset(d_melt, value == TRUE), length)$value
)
View(a)
a$share <- with(a, total_values_available / total_values)
View(a)
a$share <- round(with(a, total_values_available / total_values), 2)
Viewa
View(a)
mean(a$share)
# Analysis table
a <- data.frame(
iso = aggregate(value ~ iso, data = d_melt, length)$iso,
total_values = aggregate(value ~ iso, data = d_melt, length)$value,
total_values_available = aggregate(value ~ iso, data = subset(d_melt, value == FALSE), length)$value
)
a$share <- round(with(a, total_values_available / total_values), 2)
View(A)
View(a)
mean(a$share)
devtools::install_github("gaborcsardi/crayon")
cat(red("x"))
library(crayon)
cat(red("x"))
library(dplyr, quietly = TRUE)
m = mean(a$share)
m
m * 100
round(m,2) * 100
red(round(m,2) * 100)
round(mean(a$share),2) * 100
View(a)
View(d_melt)
a_location <- data.frame(
iso = aggregate(value ~ location, data = d_melt, length)$location,
total_values = aggregate(value ~ location, data = d_melt, length)$value,
total_values_available = aggregate(value ~ location, data = subset(d_melt, value == FALSE), length)$value
)
View(a_location)
names(a_location)
a_location$country <- countrycode(a$iso, "country.name", "iso3c")
a_location$share <- round(with(a_location, total_values_available / total_values), 2)
a_location$country <- countrycode(a$iso, "country.name", "iso3c")
# Summary data per location.
a_location <- data.frame(
iso = aggregate(value ~ location, data = d_melt, length)$location,
total_values = aggregate(value ~ location, data = d_melt, length)$value,
total_values_available = aggregate(value ~ location, data = subset(d_melt, value == FALSE), length)$value
)
a_location$share <- round(with(a_location, total_values_available / total_values), 2)
a_location$country <- countrycode(a$iso, "country.name", "iso3c")
View(a_location)
a_location <- data.frame(
iso = aggregate(value ~ location, data = d_melt, length)$location,
total_values = aggregate(value ~ location, data = d_melt, length)$value,
total_values_available = aggregate(value ~ location, data = subset(d_melt, value == FALSE), length)$value
)
a_location$share <- round(with(a_location, total_values_available / total_values), 2)
a_location$country <- countrycode(a_location$iso, "country.name", "iso3c")
View(a_location)
a_location  <- a_location[is.na(a_location$country),]  # cleaning national measurements
View(a_location)
View(d_melt)
aggregate(value ~ variable, data = d_melt, length)
x <- aggregate(value ~ variable, data = d_melt, length)
View(x)
x <- aggregate(value ~ variable, data = subset(d_melt, value == FALSE), length)
View(x)
x <- aggregate(variable ~ iso, data = subset(d_melt, value == FALSE), length)
View(x)
View(d_melt)
x <- aggregate(iso ~ variable, data = subset(d_melt, value == FALSE), length)
View(x)
x <- dcast(subset(d_melt, value == FALSE), variable ~ iso)
View(x)
indicator_assessment <- dcast(subset(d_melt, value == FALSE), variable ~ iso)
indicator_assessment <- dcast(subset(d_melt, value == FALSE), variable ~ iso)
names(indicator_assessment)[1] <- "Indicator"
View(indicator_assessment)
# Indicator assessment
sink(paste0(p, "_indicator_assessment", ".json"))
cat(toJSON(indicator_assessment))
sink()
